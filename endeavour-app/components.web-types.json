{
  "$schema": "https://json.schemastore.org/web-types.json",
  "name": "endeavour-app",
  "version": "0.1.0",
  "framework": "vue",
  "js-types-syntax": "typescript",
  "description-markup": "markdown",
  "contributions": {
    "html": {
      "vue-components": [
        {
          "name": "app-promise-presenter",
          "priority": "highest",
          "source": {
            "file": "./src/components/AppPromisePresenter.ts",
            "offset": 1234
          },
          "description": "Selects the right template to render an `AsyncValue` based on its status.",
          "props": [
            {
              "name": "value",
              "description": "A `PromiseAdapter<P, V>` or a `PromiseStore<P, V>`",
              "type": ["PromiseAdapter<P, V>", "PromiseStore<P, V>"],
              "required": true
            }
          ],
          "slots": [
            {
              "name": "initial",
              "description": "Content to render while in the `initial` state. If left unspecified, fallbacks to the `loading` slot."
            },
            {
              "name": "loading",
              "description": "Content to render while in the `loading` state."
            },
            {
              "name": "empty",
              "description": "Content to render while in the `success` state and the `emptyPredicate` is matched. If left unspecified, fallbacks to the `content` or `default` slot."
            },
            {
              "name": "content",
              "description": "Content to render while in the `success` state and the `emptyPredicate` is not matched. If left unspecified, fallbacks to the `default` slot."
            },
            {
              "name": "error",
              "description": "Content to render while in the `error` state."
            },
            {
              "name": "refreshing",
              "description": "Content to render while in the `refreshing` state. If left unspecified, fallbacks to the `empty` slot if the `emptyPredicate` is matched, then fallbacks to the `content` or `default` slot."
            },
            {
              "name": "retrying",
              "description": "Content to render while in the `retrying` state. If left unspecified, fallbacks to the `error` slot."
            },
            {
              "name": "default",
              "description": "Alias for the `content` slot."
            }
          ]
        },
        {
          "name": "app-binder-presenter",
          "priority": "highest",
          "source": {
            "file": "./src/components/AppBinderPresenter.ts",
            "offset": 995
          },
          "description": "Selects the right template to render a `Binder` based on its status.",
          "props": [
            {
              "name": "value",
              "description": "A `BinderAdapter<P, V, Meta>` or a `BinderStore<P, V, Meta>`",
              "type": [
                "EnumerableBinderAdapter<P, V[], Meta>",
                "EnumerableBinderStore<P, V[], Meta>",
                "IndexableBinderAdapter<P, V[], Meta>",
                "IndexableBinderStore<P, V[], Meta>"
              ],
              "required": true
            }
          ],
          "slots": [
            {
              "name": "initial",
              "description": "Content to render while in the `initial` state."
            },
            {
              "name": "nested",
              "description": "Content to render while in the `nested` state. If left unspecified, fallbacks to the `default` slot."
            },
            {
              "name": "error",
              "description": "Content to render while in the `error` state."
            },
            {
              "name": "retrying",
              "description": "Content to render while in the `retrying` state. If left unspecified, fallbacks to the `error` slot."
            },
            {
              "name": "default",
              "description": "Alias for the `content` slot."
            }
          ]
        },
        {
          "name": "app-binder-page-presenter",
          "priority": "highest",
          "source": {
            "file": "./src/components/AppBinderPagePresenter.ts",
            "offset": 1100
          },
          "description": "Selects the right template to render an `AsyncPage` based on its status.",
          "props": [
            {
              "name": "value",
              "description": "An `AsyncPage` ref",
              "type": ["AsyncPage<V>"],
              "required": true
            }
          ],
          "slots": [
            {
              "name": "loading",
              "description": "Content to render while in the `loading` state."
            },
            {
              "name": "empty",
              "description": "Content to render while in the `success` state and the `emptyPredicate` is matched. If left unspecified, fallbacks to the `content` or `default` slot."
            },
            {
              "name": "content",
              "description": "Content to render while in the `success` state and the `emptyPredicate` is not matched. If left unspecified, fallbacks to the `default` slot."
            },
            {
              "name": "error",
              "description": "Content to render while in the `error` state."
            },
            {
              "name": "refreshing",
              "description": "Content to render while in the `refreshing` state. If left unspecified, fallbacks to the `empty` slot if the `emptyPredicate` is matched, then fallbacks to the `content` or `default` slot."
            },
            {
              "name": "retrying",
              "description": "Content to render while in the `retrying` state. If left unspecified, fallbacks to the `error` slot."
            },
            {
              "name": "default",
              "description": "Alias for the `content` slot."
            }
          ]
        }
      ]
    }
  }
}
